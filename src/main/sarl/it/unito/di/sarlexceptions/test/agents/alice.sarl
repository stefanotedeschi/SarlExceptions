package it.unito.di.sarlexceptions.test.agents

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Schedules
import java.util.UUID
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import it.unito.di.sarlexceptions.test.exceptions.MyOtherException
import it.unito.di.sarlexceptions.test.exceptions.MyException
import it.unito.di.sarlexceptions.test.exceptions.MyUncommonException
import it.unito.di.sarlexceptions.spaces.ExceptionSpaceSpecification
import io.sarl.core.Logging
import it.unito.di.sarlexceptions.events.NoHandlerAvailable

agent Alice {

	uses DefaultContextInteractions, Schedules, Behaviors, Logging
	var comspace : ExceptionSpace
	
	
	on Initialize {
		
		comspace = defaultContext.getOrCreateSpaceWithSpec(typeof(ExceptionSpaceSpecification),
			occurrence.parameters.get(0) as UUID)
		info("Hello from ALICE")
		comspace.registerAsRaiser(Initialize, MyException, asEventListener)
		comspace.registerAsRaiser(Initialize, MyOtherException, asEventListener)
		comspace.registerAsRaiser(Initialize, MyUncommonException, asEventListener)

		comspace.raiseException(new MyOtherException(NullPointerException), getID)
			
		comspace.raiseException(new MyException(NullPointerException), getID)

		comspace.raiseException(new MyUncommonException(NullPointerException), getID)
		
	}
	
	on NoHandlerAvailable {
		
		info("ALICE: No handler available for exception " + occurrence.ex.simpleName)
		
	}
	
}
