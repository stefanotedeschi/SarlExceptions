package it.unito.di.sarlexceptions.test.agents

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Schedules
import java.util.UUID
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import it.unito.di.sarlexceptions.test.exceptions.MyOtherException
import it.unito.di.sarlexceptions.test.exceptions.MyException
import it.unito.di.sarlexceptions.test.exceptions.MyUncommonException
import it.unito.di.sarlexceptions.spaces.ExceptionSpaceSpecification
import io.sarl.core.Logging
import it.unito.di.sarlexceptions.events.NoHandlerAvailable
import it.unito.di.sarlexceptions.events.ExceptionSpaceCreated

agent Alice {

	uses DefaultContextInteractions, Schedules, Behaviors, Logging
	
	on Initialize {

		info("Hello from ALICE")
		
		val type1 = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<MyException>>
		val exSpace1 : ExceptionSpace<MyException> = defaultContext.getOrCreateSpaceWithID(type1, UUID::randomUUID)
		exSpace1.registerAsRaiser(asEventListener)
		emit(new ExceptionSpaceCreated(MyException, exSpace1.spaceID.ID))
		

		val type2 = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<MyOtherException>>
		val exSpace2 : ExceptionSpace<MyOtherException> = defaultContext.getOrCreateSpaceWithID(type2, UUID::randomUUID)
		exSpace2.registerAsRaiser(asEventListener)
		emit(new ExceptionSpaceCreated(MyOtherException, exSpace2.spaceID.ID))

		val type3 = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<MyUncommonException>>
		val exSpace3 : ExceptionSpace<MyUncommonException> = defaultContext.getOrCreateSpaceWithID(type3, UUID::randomUUID)
		exSpace3.registerAsRaiser(asEventListener)
		emit(new ExceptionSpaceCreated(MyUncommonException, exSpace3.spaceID.ID))

		in(1000) [
			exSpace1.raiseException(new MyException(NullPointerException), getID)
			exSpace2.raiseException(new MyOtherException(NullPointerException), getID)
			exSpace3.raiseException(new MyUncommonException(NullPointerException), getID)
		]
	}
	
	on NoHandlerAvailable {
		
		info("ALICE: No handler available for exception " + occurrence.ex.simpleName)
		
	}
	
}
