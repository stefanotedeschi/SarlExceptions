package it.unito.di.sarlexceptions.examples.prescription

import io.sarl.core.Initialize
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import it.unito.di.sarlexceptions.events.ExceptionSpaceCreated
import it.unito.di.sarlexceptions.spaces.ExceptionSpaceSpecification
import java.util.UUID

agent Pharmacist {
	
	uses DefaultContextInteractions, Behaviors,Logging

	var exSpacePatient : ExceptionSpace<NoDelivery>
	var exSpaceDoctor : ExceptionSpace<MissingPrescription>

	on Initialize {
		info("[Pharmacist] Initialized!")
	}

	on ExceptionSpaceCreated [occurrence.ex == NoDelivery] {
		
		exSpacePatient = defaultContext.getSpace(occurrence.id)
		exSpacePatient.registerAsHandler(asEventListener)
		info("[Pharmacist] Registered as handler for NoDelivery!")

		val tDoctor = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<MissingPrescription>>
		exSpaceDoctor = defaultContext.getOrCreateSpaceWithID(tDoctor, UUID::randomUUID)
		exSpaceDoctor.registerAsRaiser(asEventListener)
		emit(new ExceptionSpaceCreated(MissingPrescription, exSpaceDoctor.spaceID.ID))
		
    }
    
    on Prescribe {
		info("[Pharmacist] New prescription received from doctor! Sending medicines to patient...")
		emit(new FillPrescription)
    }
	
	on NoDelivery {
		info("[Pharmacist] NoDelivery!")
	}
	
}
