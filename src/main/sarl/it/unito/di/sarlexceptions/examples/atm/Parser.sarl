
package it.unito.di.sarlexceptions.examples.atm

import io.sarl.core.Initialize
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import java.util.UUID
import io.sarl.core.Logging
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import it.unito.di.sarlexceptions.spaces.ExceptionSpaceSpecification
import it.unito.di.sarlexceptions.events.ExceptionSpaceCreated

agent Parser {
	
	uses DefaultContextInteractions, Behaviors,Logging

	var exSpace : ExceptionSpace<NotANumberException>

	on Initialize {
		val type = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<NotANumberException>>
		exSpace = defaultContext.getOrCreateSpaceWithSpec(type, UUID::randomUUID)
		exSpace.registerAsRaiser(asEventListener)
		emit(new ExceptionSpaceCreated(NotANumberException, exSpace.spaceID.ID))
	}

	on ParsingRequest {

		info("Parsing request received!")
		
		var amountString = occurrence.amount
		if (amountString == null) {
           exSpace.raiseException(new NotANumberException(-1),ID)
        }

        var result = 0
        var negative = false
        var i = 0
        var len = amountString.length()
        var limit = -Integer.MAX_VALUE
        var multmin : int
        var digit : int

        if(len > 0) {
            var firstChar = amountString.charAt(0);
            if (firstChar < '0') { // Possible leading "+" or "-"
                if (firstChar == '-') {
                    negative = true
                    limit = Integer.MIN_VALUE;
				} else if (firstChar != '+') {
					exSpace.raiseException(new NotANumberException(i), ID)
					return
				}
                if (len == 1) { // Cannot have lone "+" or "-"
					exSpace.raiseException(new NotANumberException(i), ID)
					return
				}
                i++;
            }
            multmin = limit / 10;
            while (i < len) {
                // Accumulating negatively avoids surprises near MAX_VALUE
                digit = Character.digit(amountString.charAt(i++), 10);
                if (digit < 0) {
					exSpace.raiseException(new NotANumberException(i), ID)
                	return
                }
                if (result < multmin) {
					exSpace.raiseException(new NotANumberException(i), ID)
                	return
                }
                result *= 10;
                if (result < limit + digit) {
					exSpace.raiseException(new NotANumberException(i), ID)
                	return
                }
                result -= digit;
            }
        } else {
			exSpace.raiseException(new NotANumberException(-1), ID)
        	return
        }
        var amountInt = negative ? result : -result;
		emit(new ParsingDone(amountInt))
	}

}
