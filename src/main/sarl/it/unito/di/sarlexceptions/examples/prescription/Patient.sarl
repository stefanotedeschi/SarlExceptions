package it.unito.di.sarlexceptions.examples.prescription

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import it.unito.di.sarlexceptions.events.ExceptionSpaceCreated
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import it.unito.di.sarlexceptions.spaces.ExceptionSpaceSpecification
import java.util.UUID

agent Patient {
	
	uses DefaultContextInteractions, Behaviors,Logging, Schedules

	var exSpace : ExceptionSpace<LostMedicines>

	var prescriptionReceived = false

	on Initialize {
		
		val type = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<LostMedicines>>
		exSpace = defaultContext.getOrCreateSpaceWithID(type, UUID::randomUUID)
		
		exSpace.registerAsRaiser(asEventListener)

		info("[Patient] Registered as raiser for LostMedicines!")
		
		emit(new ExceptionSpaceCreated(LostMedicines, exSpace.spaceID.ID))

		emit(new GetMedication)
		
		info("[Patient] Initialized!")
		
	}
	
	on GetMedication {
		
		emit(new Consult)
		
		info("[Patient] New prescription request sent to doctor!")

		in(5000) [
			if (!prescriptionReceived) {
				exSpace.raiseException(new LostMedicines(null),ID)
			}
		]
		
	}
	
	on FillPrescription {
		info("[Patient] Medicines received from pharmacist!")
		prescriptionReceived = true
		emit(new FollowTherapy)
	}

	on FillPrescriptionAgain {
		info("[Patient] Medicines received from pharmacist!")
		emit(new FollowTherapy)
	}
	
	on FollowTherapy {
		info("[Patient] *** THANK YOU ***")
	}
	
	
	
}

event GetMedication { }

event FollowTherapy { }
