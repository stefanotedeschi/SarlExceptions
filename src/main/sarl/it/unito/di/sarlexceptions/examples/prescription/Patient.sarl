package it.unito.di.sarlexceptions.examples.prescription

import io.sarl.core.Initialize
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import io.sarl.core.Schedules
import java.util.UUID
import it.unito.di.sarlexceptions.spaces.ExceptionSpaceSpecification
import it.unito.di.sarlexceptions.events.ExceptionSpaceCreated

agent Patient {
	
	uses DefaultContextInteractions, Behaviors,Logging, Schedules

	var exSpaceDoctor : ExceptionSpace<LostRequest>
	var exSpacePharmacist : ExceptionSpace<NoDelivery>

	var prescriptionReceived = false

	on Initialize {
		
		val tDoctor = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<LostRequest>>
		val tPharmacist = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<NoDelivery>>

		exSpaceDoctor = defaultContext.getOrCreateSpaceWithID(tDoctor, UUID::randomUUID)
		exSpacePharmacist = defaultContext.getOrCreateSpaceWithID(tPharmacist, UUID::randomUUID)
		
		exSpaceDoctor.registerAsRaiser(asEventListener)
		exSpacePharmacist.registerAsRaiser(asEventListener)
		
		emit(new ExceptionSpaceCreated(LostRequest, exSpaceDoctor.spaceID.ID))
		emit(new ExceptionSpaceCreated(NoDelivery, exSpacePharmacist.spaceID.ID))

		emit(new GetMedication)
		
		info("[Patient] Initialized!")
		
	}
	
	on GetMedication {
		
		emit(new Consult)
		
		info("[Patient] New prescription request sent to doctor!")

		in(5000) [
			if (!prescriptionReceived) {
				exSpaceDoctor.raiseException(new LostRequest("ciao"),ID)
				exSpacePharmacist.raiseException(new NoDelivery("ciao"),ID)
			}
			else {
				info("*** THANK YOU ***")
			}
		]
		
	}
	
	on FillPrescription {
		info("[Patient] Medicines received from pharmacist!")
		prescriptionReceived = true
	}
	
}

event GetMedication { }
