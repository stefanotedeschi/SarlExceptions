package it.unito.di.sarlexceptions.examples.atm

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Failure
import io.sarl.api.core.Initialize
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import it.unito.di.sarlexceptions.events.ExceptionSpaceCreated
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import java.util.Scanner

event MyFailure extends Failure {
	
}

agent UserAgent {
	
	uses DefaultContextInteractions, Schedules, Behaviors, Logging
	
	var exSpace : ExceptionSpace<NotANumberException>
	var attempts = 1

	on Initialize {
		info("Waiting for a suitable parser...")
	}
	
	on RequestInput {

		var input = new Scanner(System.in);
		info("Insert the desired amount: ");
		var amount = input.next();
		
		info("Requesting parsing...");
		emit(new ParsingRequest(amount))
		
	}

	on ExceptionSpaceCreated [occurrence.ex === NotANumberException] {
		exSpace = defaultContext.getSpace(occurrence.id)
		exSpace.registerAsHandler(asEventListener)
		//exSpace.registerAsHandler(occurrence.ex, asEventListener)
		info("Parser found!")
		wake(new RequestInput)
	}
	
	on NotANumberException {
		info("The inserted string is not a number in digits!")
		if(attempts < 3) {
			info("Performing another attempt...")
			attempts++
			wake(new RequestInput)
		}
		else {
			wake(new CloseATM)
		}
	}
	
	on ParsingDone {
		var amount = occurrence.amount
		info("Please withdraw " + amount + "â‚¬ within 10 seconds.")
		Thread::sleep(10000)
		wake(new WithdrawalCompleted)
	}
	
	on CloseATM {
		info("Please, retry later.")
	}

	on WithdrawalCompleted {
		info("Withdrawal completed.")
	}
	
}
