package it.unito.di.sarlexceptions.spaces

import io.sarl.api.core.Failure
import io.sarl.lang.core.EventListener
import io.sarl.sre.janus.spaces.OpenLocalEventSpace
import it.unito.di.sarlexceptions.events.NoHandlerAvailable
import java.util.UUID
import java.util.concurrent.CopyOnWriteArrayList

class ExceptionSpaceImpl<T extends Failure> extends OpenLocalEventSpace implements ExceptionSpace<T> {
	
	var raisers = new CopyOnWriteArrayList<UUID>
	
	var handlers = new CopyOnWriteArrayList<UUID>

	def registerAsRaiser(listener : EventListener) : void {
		registerStrongParticipant(listener)
		raisers.add(listener.getID)
		//emit(this.spaceID.ID, new ExceptionRaiserRegistered(e, listener.ID))
	}

	def registerAsHandler(listener : EventListener) : void {
		registerStrongParticipant(listener)
		handlers.add(listener.getID)
		//emit(this.spaceID.ID, new ExceptionHandlerRegistered(e, listener.ID))
	}
	
	def raiseException(e : T, id : UUID) {
		if(raisers.contains(id)) {
			if (handlers.isEmpty) {
				emit(this.spaceID.ID, new NoHandlerAvailable(e.class))[it.getID == id]
			}
			else {
				logger.info("New exception raised: " + e.class.simpleName.toString)
				for(handler : handlers) {
					emit(id,e)[it.getID == handler]
				}
			}
		}
		else {
			// TODO: cosa fare se l'eccezione la lancia uno che non e' raiser?
		}
	}
	
}
